package com.ertc.taskman;

public class MainApp {
    public static void main(String[] args) {
        RepService repository = new TaskRepository("Rep 1");
        TaskService service = new TaskService((TaskRepository) repository);

        Task task001 = new Task(26, "t001", "Vovka", "Oleg", "Work");
        Task task002 = new Task(1, "t002", "Vovka", "Ivan", "Work");
        Task task003 = new Task(2, "t003", "Vovka", "Oleg", "Work");
        Task task004 = new Task(3, "t004", "Vovka", "Ivan", "Work");
        Task task0041 = new Task(3, "t004", "Vovka", "Ivan", "Work");
        Task task005 = new Task(4, "t005", "Vovka", "Ivan", "Work");
        Task task006 = new Task(5, "t006", "Vovka", "Oleg", "Work");
        Task task007 = new Task(6, "t007", "Vovka", "Ivan", "Work");
        Task task008 = new Task(7, "t008", "Vovka", "Ivan", "Work");
        Task task009 = new Task(8, "t009", "Vovka", "Ivan", "Work");
        Task task010 = new Task(9, "t010", "Vovka", "Oleg", "Work");
        Task task011 = new Task(10, "t011", "Vovka", "Ivan", "Work");
        service.addTask(task001);
        service.addTask(task002);
        service.addTask(task003);
        service.addTask(task004);
        service.addTask(task0041);
        service.addTask(task005);
        service.addTask(task006);
        service.addTask(task007);
        service.addTask(task008);
        service.addTask(task009);
        service.addTask(task010);
        service.addTask(task011);

        service.printTaskRep();

        service.delTask(7L);
        service.delTask(23L);

        service.printTaskRep();

        service.updTask(222L, "not", "not", "not", Task.Status.CLOSE);
        service.updTask(9L, "upd t010", "Vovka", "sleep", Task.Status.CLOSE);

        service.printTaskRep();
    }
}

package com.ertc.taskman;

public interface RepService {
    void prepare(String title);
    boolean addTask(Task task);;
    boolean addTask(long id, String name, String owner, String executor, String description);
    boolean isTaskExists(Task task);
    Task findTaskById(Long id);
    boolean updTask(long id, String name, String executor, String description, Task.Status status);
}

package com.ertc.taskman.exceptions;

public class NoSuchTaskException extends RuntimeException {
    public NoSuchTaskException(String message) {
        super(message);
    }
}

package com.ertc.taskman.exceptions;

public class RepositorySpaceException extends RuntimeException {
    public RepositorySpaceException(String message) {
        super(message);
    }
}

package com.ertc.taskman.exceptions;

public class TaskAlreadyExistsException extends RuntimeException {
    public TaskAlreadyExistsException(String message) {
        super(message);
    }
}

package com.ertc.taskman;

import java.util.Objects;

public class Task {
    public enum Status {
        CREATED("Created"), CLOSE("Close"), REJECTED("Rejected");

        private String engTitle;

        public String getEngTitle() {
            return engTitle;
        }

        Status(String engTitle) {
            this.engTitle = engTitle;
        }
    }

    private Long id;
    private String name;
    private String owner;
    private String executor;
    private String description;
    private Status status;

    public Task(){
    }

    public Task(long id, String name, String owner, String executor, String description) {
        this.id = id;
        this.name = name;
        this.owner = owner;
        this.executor = executor;
        this.description = description;
        this.status = Status.CREATED;
    }

    public long getId() {
        return id;
    }

    public String getName() {
        return name;
    }

    @Override
    public boolean equals(Object obj) {
        if (obj == null){
            return false;
        }
        if (this == obj){
            return true;
        }
        if(!(obj instanceof Task)){
            return false;
        }
        Task task = (Task) obj;
        return this.id.equals(task.id) &&
                this.name.equals(task.name) &&
                this.owner.equals(task.owner) &&
                this.executor.equals(task.executor) &&
                this.description.equals(task.description) &&
                this.status.equals(task.status);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id, name, owner, executor, description, status);
    }

    @Override
    public String toString() {
        return "Task{" +
                "id=" + id +
                ", name='" + name + '\'' +
                ", owner='" + owner + '\'' +
                ", executor='" + executor + '\'' +
                ", description='" + description + '\'' +
                ", status='" + status.engTitle + '\'' +
                '}';
    }

    public void updTask(String name, String executor, String description, Task.Status status){
        this.name = name;
        this.executor = executor;
        this.description = description;
        this.status = status;
    }
}

package com.ertc.taskman;

import com.ertc.taskman.exceptions.NoSuchTaskException;
import com.ertc.taskman.exceptions.RepositorySpaceException;
import com.ertc.taskman.exceptions.TaskAlreadyExistsException;
import java.util.ArrayList;
import java.util.List;

public class TaskRepository implements RepService{
    private String title;
    private List<Task> tasks;

    public String getTitle() {
        return title;
    }

    public List<Task> getTasks() {
        return tasks;
    }

    public TaskRepository(String title) {
        prepare(title);
    }

    @Override
    public void prepare(String title){
        this.title = title;
        this.tasks = new ArrayList<>();
    }

    @Override
    public boolean addTask(Task task){
        if( !isTaskExists(task) ){
            return addTaskExc(task);
        }
        return false;
    }

    @Override
    public boolean addTask(long id, String name, String owner, String executor, String description){
        Task task = new Task(id, name, owner, executor, description);
        if( !isTaskExists(task) ){
            return addTaskExc(task);
        }
        return false;
    }

    private boolean addTaskExc(Task task){
        if(tasks.size() == 10){
            throw new RepositorySpaceException("Repository Full");
        }
        tasks.add(task);
        return true;
    }

    @Override
    public boolean isTaskExists(Task task){
        for (Task listTask: tasks) {
            if(listTask.equals(task)){
                throw new TaskAlreadyExistsException("Task Already Exists");
            }
        }
        return false;
    }

    @Override
    public Task findTaskById(Long id){
        for (Task listTask: tasks) {
            if(id.equals(listTask.getId())){
                return listTask;
            }
        }
        throw new NoSuchTaskException("No Such Task");
    }

    private int findIndexByTaskId(Long id){
        for (int i = 0; i < tasks.size() ; i++) {
            if(id.equals(tasks.get(i).getId())){
                return i;
            }
        }
        throw new NoSuchTaskException("No Such Task");
    }

    @Override
    public boolean updTask(long id, String name, String executor, String description, Task.Status status){
        Task uTask = this.findTaskById(id);
        int indexTask = this.findIndexByTaskId(id);
        uTask.updTask(name, executor, description, status);
        tasks.set(indexTask, uTask);
        return true;
    }
}

package com.ertc.taskman;

import com.ertc.taskman.exceptions.NoSuchTaskException;
import com.ertc.taskman.exceptions.RepositorySpaceException;
import com.ertc.taskman.exceptions.TaskAlreadyExistsException;

public class TaskService {
    private TaskRepository repository;

    public TaskService(TaskRepository repository) {
        this.repository = repository;
    }

    public void addTask(Task task){
        try {
            repository.addTask(task);
            System.out.println("Task added");
        } catch (RepositorySpaceException | TaskAlreadyExistsException e) {
            System.out.println("Task not added: " + e.toString());
        }
    }

    public void printTaskRep(){
        System.out.println("Task Repository: " + repository.getTitle() + " ( size = " + repository.getTasks().size() + " )");
        for (Task taskArr: repository.getTasks()) {
            System.out.println(taskArr.toString());
        }
    }

    public void delTask(Long id){
        try {
            repository.getTasks().remove(repository.findTaskById(id));
            System.out.println("Task id = " + id + " deleted");
        } catch (NoSuchTaskException e) {
            System.out.println("Task not deleted: " + e.toString());
        }
    }

    public void updTask(long id, String name, String executor, String description, Task.Status status){
        try {
            repository.updTask(id, name, executor, description, status);
        } catch (NoSuchTaskException e) {
            System.out.println("Task not updated: " + e.toString());
        }

    }

}